" Colors and syntaxing
syntax on

let mapleader=","

" Column and numbering
set colorcolumn=100
set number relativenumber

" ESC mapped to 'jj'
imap jj <Esc>

" Spacing
set tabstop=2
set expandtab
set shiftwidth=2
set softtabstop=2
set autoindent

filetype plugin on
set omnifunc=syntaxcomplete#Complete

" Undo options
set undodir=$HOME/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

" Get rid of swap file
set noswapfile

" Turn on wildmenu
set wildmenu
set wildignore=*.o,*~,*.pyc
set wildmode=list:longest,full

" Status Line Configuration
set ruler
set showcmd
set modeline
set encoding=utf-8

" Fix vim for lightline plugin
set laststatus=2
set noshowmode

" Split Screen Manager Settings
set splitright
set splitbelow
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" PLUGIN MANAGER SETTINGS "
"""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" PLUGINS "
"""""""""""
call plug#begin('~/.vim/plugged')

Plug 'voldikss/vim-floaterm'
Plug 'itchyny/lightline.vim'
if !has('gui_running')
    set t_Co=256
endif
Plug 'arcticicestudio/nord-vim'
Plug 'rhysd/vim-clang-format'
Plug 'Townk/vim-autoclose'
Plug 'vim-python/python-syntax'
Plug 'ryanoasis/vim-devicons'
Plug 'cespare/vim-toml'
Plug 'dense-analysis/ale'
Plug 'maximbaz/lightline-ale'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

call plug#end()


" ALE Settings "
""""""""""""""""
" Toggle ALE linting.
map <leader>l :ALEToggle<cr>
let g:ale_linters = { 'c':    [ 'clang' ]    }


" indentLine Settings "
"""""""""""""""""""""""
let g:indentLine_char = '│'


" FLOATERM KEYMAPPINGS "
""""""""""""""""""""""""
let g:floaterm_keymap_kill = '<Leader>kt'
let g:floaterm_keymap_new = '<Leader>nt'
let g:floaterm_keymap_toggle = '<leader>t'
let g:floaterm_width = 0.9
let g:floaterm_height = 0.9
let g:floaterm_title = ''


" LightLine Settings "
""""""""""""""""""""""
colorscheme nord
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'component_function': {
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat'
      \ }
      \ }
let g:lightline.component_expand = {
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_infos': 'lightline#ale#infos',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok',
  \ }
let g:lightline.component_type = {
  \   'linter_checking': 'right',
  \   'linter_infos': 'right',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'right',
  \ }
let g:lightline.active = {
  \   'right': [
  \     [
  \       'linter_errors',
  \       'linter_warnings',
  \       'linter_ok'
  \     ],
  \     [ 'lineinfo' ],
  \     [ 'fileformat', 'fileencoding', 'filetype' ],
  \   ]
  \ }
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e\ "
let g:lightline#ale#indicator_ok = "\uf00c"


" Devicons Settings "
"""""""""""""""""""""
function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.toml'] = ''

" vim-autoclose Settings "
""""""""""""""""""""""""""
let g:AutoClosePairs = "() [] {} ` \" ' <>"

